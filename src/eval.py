from data.load import train_gen, x_test, y_test
from model.model import model, as_dense

from adversarial import adversarial_eval

from keras import backend as K
import tensorflow as tf
config = tf.ConfigProto()
config.gpu_options.allow_growth = True
sess = tf.Session(config=config)
K.set_session(sess)

import keras
import numpy as np
m = model()

samples_per_epoch = 1853666

optimizer = keras.optimizers.Adam()
m.compile(loss='binary_crossentropy', optimizer=optimizer, metrics=['accuracy', 'matthews_correlation'])

name = "regularized-0.01.weights.09-0.05"

m.load_weights("models/"+name+".hdf5")

y_pred = m.predict(x_test)
y_truth = y_test

y_round = np.copy(y_pred)
y_round[y_round < 0.5] = 0
y_round[y_round >= 0.5] = 1

import matplotlib
matplotlib.use('Agg') 
import matplotlib.pyplot as plt

from sklearn.metrics import classification_report, roc_curve, auc, confusion_matrix

print (confusion_matrix(y_truth, y_round))
print(classification_report(y_truth, y_round, target_names=['fine', 'defect']))

false_positive_rate, true_positive_rate, thresholds = roc_curve(y_truth, y_pred, pos_label=1)
roc_auc = auc(false_positive_rate, true_positive_rate)

plt.title('Receiver Operating Characteristic')
plt.plot(false_positive_rate, true_positive_rate, 'b', label='AUC = %0.2f'% roc_auc)
plt.legend(loc='lower right')
plt.plot([0,1],[0,1],'r--')
plt.xlim([-0.1,1.2])
plt.ylim([-0.1,1.2])
plt.ylabel('True Positive Rate')
plt.xlabel('False Positive Rate')
plt.savefig('../figures/roc.'+name+'.png')

m2 = as_dense(m)

adversarial_eval(m2)
