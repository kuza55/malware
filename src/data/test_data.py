# Do the import here for serialization purposes
from load import train_gen, x_test, y_test, train_good, train_mal

import numpy as np
import pandas as pd
import os

import cPickle as pickle

dir_path = os.path.dirname(os.path.realpath(__file__))

raw_dir = dir_path+'/../../data/raw/'
processed_dir = dir_path+'/../../data/processed/'
indir = raw_dir+'feature_vectors/'

df = pd.read_csv(raw_dir+'sha256_family.csv')
malware = set(df['sha256'].values)

manifest_prefix = {
'activity':True,
'feature':True,
'intent':True,
'permission':True,
'provider':True,
'service_receiver':True
}

code_prefix = {
'real_permission':True,
'api_call':True,
'call':True,
'url':True
}

#Load mappings
with open( processed_dir+"code_map.pickle", "rb" ) as f:
    code_map = pickle.load( f )
    inv_code_map = {v: k for k, v in code_map.iteritems()}

with open( processed_dir+"manifest_map.pickle", "rb" ) as f:
    manifest_map = pickle.load( f )
    inv_manifest_map = {v: k for k, v in manifest_map.iteritems()}

mwr = 0.3
samples_per_epoch = int(train_mal / mwr)
epochs = 10


done = 0
gen = train_gen(mwr=mwr, ret_hashes=True)
while done < samples_per_epoch * epochs:
    batch = next(gen)
    ([x_m, x_c], y, hashes) = batch

    for i in range(len(batch)):
        isMalware = y[i]
        hash = hashes[i]

        inSet = hash in malware

        assert inSet == isMalware

        path = indir + hash
        text_set = set()
        with open(path, 'r') as f:
            
            for line in f:
                try:
                    prefix = line[:line.index(":")]
                    text_set.add(line)
                except ValueError:
                    #Ignore blank lines
                    continue

        numpy_set = set()
        manifest_coo = x_m[i].tocoo()
        manifest_arr =  manifest_coo.col
        code_coo = x_c[i].tocoo()
        code_arr =  code_coo.col
        for j in range(len(manifest_arr)):
            idx = manifest_arr[j]
            if manifest_coo.data[j] == 1:
                numpy_set.add(inv_manifest_map[idx])
            else:
                assert False 
        for j in range(len(code_arr)):
            idx = code_arr[j]
            if code_coo.data[j] == 1:
                numpy_set.add(inv_code_map[idx])
            else:
                assert False 

        if text_set != numpy_set:
            print hash
            print text_set
            print numpy_set
            print (manifest_arr, code_arr)
            assert False


    done = done + len(batch)